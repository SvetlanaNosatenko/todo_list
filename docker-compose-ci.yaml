version: "3.9"

x-environment: &environment-shared
  POSTGRES_DB: postgres
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_HOST: postgres
  SECRET_KEY: ${SECRET_KEY}
  VK_OAUTH2_KEY: ${VK_OAUTH2_KEY}
  VK_OAUTH2_SECRET: ${VK_OAUTH2_SECRET}
  BOT_TOKEN: ${BOT_TOKEN}

services:
  front:
#    image: sermalenk/skypro-front:lesson_36
    image: sermalenk/skypro-front:lesson_37
#    image: sermalenk/skypro-front:lesson_38
    restart: always
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_healthy

  api:
    image: nosatenko/todo_list:latest
    environment: *environment-shared
    restart: always
    ports:
    - 8000:8000
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"
    healthcheck:
#      test: curl -sS http://127.0.0.1:8000/health/ || exit 1
      interval: 3s
      timeout: 3s
      retries: 3
#    volumes:
#      - ./.env:/app/.docker_env
  bot:
    image: nosatenko/todo_list:latest
    environment: *environment-shared
    restart: always
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    command: python manage.py runbot

  migrations:
    image: nosatenko/todo_list:latest
    environment: *environment-shared
    depends_on:
      postgres:
        condition: service_healthy
    #    volumes:
#      - ./.env:/app/.docker_env
    command: >
      sh -c "python manage.py migrate"

  postgres:
    image: postgres:13.0-alpine
    restart: always
    environment: *environment-shared
    healthcheck:
      test: pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 5s
      timeout: 5s
      retries: 3
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:
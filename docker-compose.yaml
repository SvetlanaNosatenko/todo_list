version: "3.9"

services:

  front:
#    image: sermalenk/skypro-front:lesson_36
#    image: sermalenk/skypro-front:lesson_37
    image: sermalenk/skypro-front:lesson-38
    ports:
      - "80:80"
    depends_on:
      - api

  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      POSTGRES_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy
    command: python manage.py migrate
    volumes:
      - ./:/app/

  api:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      POSTGRES_HOST: postgres
    ports:
      - 8000:8000
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    volumes:
      - ./:/app/
    command: python manage.py runserver 0.0.0.0:8000
    healthcheck:
      test: curl -sS http://127.0.0.1:8000/health/ || exit 1
      interval: 3s
      timeout: 3s
      retries: 3
    #    volumes:
    #      - ./.env:/app/.docker_env

  bot:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      POSTGRES_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    command: python manage.py runbot

  postgres:
    image: postgres:13.0-alpine
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

volumes:
  postgres_data: